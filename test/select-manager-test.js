// Generated by CoffeeScript 1.10.0
var Nodes, Rel, SelectManager, SqlLiteral, Table, assert;

assert = require('chai').assert;

SelectManager = require('../lib/select-manager');

Table = require('../lib/table');

SqlLiteral = require('../lib/nodes/sql-literal');

Rel = require('../lib/rel');

Nodes = require('../lib/nodes/nodes');

describe('Querying stuff', function() {
  return describe('A select manager', function() {
    describe('projects', function() {
      it('accepts sql literals', function() {
        var selectManager;
        selectManager = new SelectManager(new Table('users'));
        selectManager.project(Rel.sql('id'));
        return assert.equal(selectManager.toSql(), "SELECT id FROM \"users\"");
      });
      return it('accepts string constants', function() {
        var selectManager;
        selectManager = new SelectManager(new Table('users'));
        selectManager.project('foo');
        return assert.equal(selectManager.toSql(), "SELECT 'foo' FROM \"users\"");
      });
    });
    describe('order', function() {
      beforeEach(function() {
        return this.selectManager = new SelectManager(new Table('users'));
      });
      return it('accepts strings', function() {
        this.selectManager.project(new SqlLiteral('*'));
        this.selectManager.order('foo');
        return assert.equal(this.selectManager.toSql(), "SELECT * FROM \"users\" ORDER BY foo");
      });
    });
    describe('group', function() {
      beforeEach(function() {
        return this.selectManager = new SelectManager(new Table('users'));
      });
      return it('accepts strings', function() {
        this.selectManager.project(new SqlLiteral('*'));
        this.selectManager.group('foo');
        return assert.equal(this.selectManager.toSql(), "SELECT * FROM \"users\" GROUP BY foo");
      });
    });
    describe('as', function() {
      beforeEach(function() {
        return this.selectManager = new SelectManager(new Table('users'));
      });
      it('makes an AS node by grouping the AST', function() {
        var as;
        as = this.selectManager.as(Rel.sql('foo'));
        assert.equal('Grouping', as.left.constructor.name);
        assert.equal(this.selectManager.ast, as.left.expr);
        return assert.equal('foo', as.right.toString());
      });
      it('converts right to SqlLiteral if string', function() {
        var as;
        as = this.selectManager.as('foo');
        return assert.equal(as.right.constructor.name, 'SqlLiteral');
      });
      return it('renders to correct AS SQL', function() {
        var outer, sub;
        sub = Rel.select().project(1);
        outer = Rel.select().from(sub.as('x')).project(Rel.star());
        return assert.equal(outer.toSql(), 'SELECT * FROM (SELECT 1) "x"');
      });
    });
    describe('As', function() {
      it('supports SqlLiteral', function() {
        var select;
        select = Rel.select().project(new Nodes.As(1, new Nodes.SqlLiteral('x')));
        return assert.equal(select.toSql(), 'SELECT 1 AS x');
      });
      return it('supports UnqualifiedName', function() {
        var select;
        select = Rel.select().project(new Nodes.As(1, new Nodes.UnqualifiedName('x')));
        return assert.equal(select.toSql(), 'SELECT 1 AS "x"');
      });
    });
    describe('from', function() {
      it('ignores string when table of same name exists', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager(table);
        manager.from(table);
        manager.from('users');
        manager.project(table.attribute('id'));
        return assert.equal(manager.toSql(), 'SELECT "users"."id" FROM users');
      });
      return it('can have multiple items together', function() {
        var manager, table;
        table = new Table('users');
        manager = table.from(table);
        manager.having('foo', 'bar');
        return assert.equal(manager.toSql(), 'SELECT FROM "users" HAVING foo AND bar');
      });
    });
    describe('on', function() {
      it('converts to sql literals', function() {
        var manager, right, table;
        table = new Table('users');
        right = table.alias();
        manager = table.from(table);
        manager.join(right).on('omg');
        return assert.equal(manager.toSql(), 'SELECT FROM "users" INNER JOIN "users" "users_2" ON omg');
      });
      return it('converts to sql literals', function() {
        var manager, right, table;
        table = new Table('users');
        right = table.alias();
        manager = table.from(table);
        manager.join(right).on('omg', "123");
        return assert.equal(manager.toSql(), 'SELECT FROM "users" INNER JOIN "users" "users_2" ON omg AND 123');
      });
    });
    describe('skip', function() {
      it('should add an offest', function() {
        var mgr, table;
        table = new Table('users');
        mgr = table.from(table);
        mgr.skip(10);
        return assert.equal(mgr.toSql(), 'SELECT FROM "users" OFFSET 10');
      });
      it('should chain', function() {
        var mgr, table;
        table = new Table('users');
        mgr = table.from(table);
        return assert.equal(mgr.skip(10).toSql(), 'SELECT FROM "users" OFFSET 10');
      });
      return it('should handle removing a skip', function() {
        var mgr, table;
        table = new Table('users');
        mgr = table.from(table);
        assert.equal(mgr.skip(10).toSql(), 'SELECT FROM "users" OFFSET 10');
        return assert.equal(mgr.skip(null).toSql(), 'SELECT FROM "users"');
      });
    });
    describe('exists', function() {
      it('should create an exists clause', function() {
        var m2, mgr, table;
        table = new Table('users');
        mgr = new SelectManager(table);
        mgr.project(new SqlLiteral('*'));
        m2 = new SelectManager;
        m2.project(mgr.exists());
        return assert.equal(m2.toSql(), "SELECT EXISTS (" + (mgr.toSql()) + ")");
      });
      return it('can be aliased', function() {
        var m2, mgr, table;
        table = new Table('users');
        mgr = new SelectManager(table);
        mgr.project(new SqlLiteral('*'));
        m2 = new SelectManager();
        m2.project(mgr.exists().as('foo'));
        return assert.equal(m2.toSql(), "SELECT EXISTS (" + (mgr.toSql()) + ") AS \"foo\"");
      });
    });
    describe('union', function() {
      beforeEach(function() {
        var m1, m2, table;
        table = new Table('users');
        m1 = new SelectManager(table);
        m1.project(Rel.star());
        m1.where(table.column('age').lt(18));
        m2 = new SelectManager(table);
        m2.project(Rel.star());
        m2.where(table.column('age').gt(99));
        return this.topics = [m1, m2];
      });
      it('should union two managers', function() {
        var m1, m2, node;
        m1 = this.topics[0];
        m2 = this.topics[1];
        node = m1.union(m2);
        return assert.equal(node.toSql(), '(SELECT * FROM "users" WHERE "users"."age" < 18) UNION (SELECT * FROM "users" WHERE "users"."age" > 99)');
      });
      return it('should union two managers', function() {
        var m1, m2, node;
        m1 = this.topics[0];
        m2 = this.topics[1];
        node = m1.union('all', m2);
        return assert.equal(node.toSql(), '(SELECT * FROM "users" WHERE "users"."age" < 18) UNION ALL (SELECT * FROM "users" WHERE "users"."age" > 99)');
      });
    });
    describe('except', function() {
      beforeEach(function() {
        var m1, m2, table;
        table = new Table('users');
        m1 = new SelectManager(table);
        m1.project(Rel.star());
        m1.where(table.column('age')["in"](Rel.range(18, 60)));
        m2 = new SelectManager(table);
        m2.project(Rel.star());
        m2.where(table.column('age')["in"](Rel.range(40, 99)));
        return this.topics = [m1, m2];
      });
      return it('should except two managers', function() {
        var m1, m2, node;
        m1 = this.topics[0];
        m2 = this.topics[1];
        node = m1.except(m2);
        return assert.equal(node.toSql(), '(SELECT * FROM "users" WHERE "users"."age" BETWEEN (18 AND 60)) EXCEPT (SELECT * FROM "users" WHERE "users"."age" BETWEEN (40 AND 99))');
      });
    });
    describe('intersect', function() {
      beforeEach(function() {
        var m1, m2, table;
        table = new Table('users');
        m1 = new SelectManager(table);
        m1.project(Rel.star());
        m1.where(table.column('age').gt(18));
        m2 = new SelectManager(table);
        m2.project(Rel.star());
        m2.where(table.column('age').lt(99));
        return this.topics = [m1, m2];
      });
      return it('should intersect two managers', function() {
        var m1, m2, node;
        m1 = this.topics[0];
        m2 = this.topics[1];
        node = m1.intersect(m2);
        return assert.equal(node.toSql(), '(SELECT * FROM "users" WHERE "users"."age" > 18) INTERSECT (SELECT * FROM "users" WHERE "users"."age" < 99)');
      });
    });
    describe('with', function() {
      return it('should support WITH RECURSIVE', function() {
        var asStatement, comments, commentsId, commentsParentId, manager, nonRecursiveTerm, recursiveTerm, repliedId, replies, string, union;
        comments = new Table('comments');
        commentsId = comments.column('id');
        commentsParentId = comments.column('parent_id');
        replies = new Table('replies');
        repliedId = replies.column('id');
        recursiveTerm = new SelectManager();
        recursiveTerm.from(comments).project(commentsId, commentsParentId).where(commentsId.eq(42));
        nonRecursiveTerm = new SelectManager();
        nonRecursiveTerm.from(comments).project(commentsId, commentsParentId).join(replies).on(commentsParentId.eq(repliedId));
        union = recursiveTerm.union(nonRecursiveTerm);
        asStatement = new Nodes.As(replies, union);
        manager = new SelectManager();
        manager["with"]('recursive', asStatement).from(replies).project(Rel.star());
        string = 'WITH RECURSIVE "replies" AS ((SELECT "comments"."id", "comments"."parent_id" FROM "comments" WHERE "comments"."id" = 42) UNION (SELECT "comments"."id", "comments"."parent_id" FROM "comments" INNER JOIN "replies" ON "comments"."parent_id" = "replies"."id")) SELECT * FROM "replies"';
        return assert.equal(manager.toSql(), string);
      });
    });
    describe('ast', function() {
      return it('it should return the ast', function() {
        var ast, mgr, table;
        table = new Table('users');
        mgr = table.from(table);
        ast = mgr.ast;
        return assert.equal(mgr.visitor.accept(ast), mgr.toSql());
      });
    });
    describe('taken', function() {
      return it('should return limit', function() {
        var manager;
        manager = new SelectManager();
        manager.take(10);
        return assert.equal(manager.taken(), 10);
      });
    });
    describe('lock', function() {
      return it('adds a lock', function() {
        var mgr, table;
        table = new Table('users');
        mgr = table.from(table);
        return assert.equal(mgr.lock().toSql(), 'SELECT FROM "users"');
      });
    });
    describe('orders', function() {
      return it('returns order clauses', function() {
        var manager, order, table;
        table = new Table('users');
        manager = new SelectManager;
        order = table.column('id');
        manager.order(table.column('id'));
        return assert.equal(manager.orders()[0].name, order.name);
      });
    });
    describe('order', function() {
      it('generates order clauses', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.project(Rel.star());
        manager.from(table);
        manager.order(table.column('id'));
        return assert.equal(manager.toSql(), 'SELECT * FROM "users" ORDER BY "users"."id"');
      });
      it('it takes args...', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.project(Rel.star());
        manager.from(table);
        manager.order(table.column('id'), table.column('name'));
        return assert.equal(manager.toSql(), 'SELECT * FROM "users" ORDER BY "users"."id", "users"."name"');
      });
      it('chains', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        return assert.equal(manager.order(table.column('id')), manager);
      });
      return it('supports asc/desc', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.project(Rel.star());
        manager.from(table);
        manager.order(table.column('id').asc(), table.column('name').desc());
        return assert.equal(manager.toSql(), 'SELECT * FROM "users" ORDER BY "users"."id" ASC, "users"."name" DESC');
      });
    });
    describe('on', function() {
      it('takes two params', function() {
        var left, manager, predicate, right;
        left = new Table('users');
        right = left.alias();
        predicate = left.column('id').eq(right.column('id'));
        manager = new SelectManager();
        manager.from(left);
        manager.join(right).on(predicate, predicate);
        return assert.equal(manager.toSql(), 'SELECT FROM "users" INNER JOIN "users" "users_2" ON "users"."id" = "users_2"."id" AND "users"."id" = "users_2"."id"');
      });
      return it('takes two params', function() {
        var left, manager, predicate, right;
        left = new Table('users');
        right = left.alias();
        predicate = left.column('id').eq(right.column('id'));
        manager = new SelectManager();
        manager.from(left);
        manager.join(right).on(predicate, predicate, left.column('name').eq(right.column('name')));
        return assert.equal(manager.toSql(), 'SELECT FROM "users" INNER JOIN "users" "users_2" ON "users"."id" = "users_2"."id" AND "users"."id" = "users_2"."id" AND "users"."name" = "users_2"."name"');
      });
    });
    describe('froms', function() {
      return it('it should hand back froms', function() {
        var relation;
        relation = new SelectManager();
        return assert.equal([].length, relation.froms().length);
      });
    });
    describe('nodes', function() {
      it('it should create AND nodes', function() {
        var children, clause, relation;
        relation = new SelectManager();
        children = ['foo', 'bar', 'baz'];
        clause = relation.createAnd(children);
        assert.equal(clause.constructor, Nodes.And);
        return assert.equal(clause.children, children);
      });
      it('it should create JOIN nodes', function() {
        var join, relation;
        relation = new SelectManager();
        join = relation.createJoin('foo', 'bar');
        assert.equal(join.constructor, Nodes.InnerJoin);
        assert.equal('foo', join.left);
        return assert.equal('bar', join.right);
      });
      return it('it should create JOIN nodes with a class', function() {
        var join, relation;
        relation = new SelectManager();
        join = relation.createJoin('foo', 'bar', Nodes.LeftOuterJoin);
        assert.equal(join.constructor, Nodes.LeftOuterJoin);
        assert.equal('foo', join.left);
        return assert.equal('bar', join.right);
      });
    });
    describe('join', function() {
      it('responds to join', function() {
        var left, manager, predicate, right;
        left = new Table('users');
        right = left.alias();
        predicate = left.column('id').eq(right.column('id'));
        manager = new SelectManager();
        manager.from(left);
        manager.join(right).on(predicate);
        return assert.equal(manager.toSql(), 'SELECT FROM "users" INNER JOIN "users" "users_2" ON "users"."id" = "users_2"."id"');
      });
      it('it takes a class', function() {
        var left, manager, predicate, right;
        left = new Table('users');
        right = left.alias();
        predicate = left.column('id').eq(right.column('id'));
        manager = new SelectManager();
        manager.from(left);
        manager.join(right, Nodes.LeftOuterJoin).on(predicate);
        return assert.equal(manager.toSql(), 'SELECT FROM "users" LEFT OUTER JOIN "users" "users_2" ON "users"."id" = "users_2"."id"');
      });
      return it('it noops on null', function() {
        var manager;
        manager = new SelectManager();
        return assert.equal(manager.join(null), manager);
      });
    });
    describe('joins', function() {
      it('returns join sql', function() {
        var alias, manager, table;
        table = new Table('users');
        alias = table.alias();
        manager = new SelectManager();
        manager.from(new Nodes.InnerJoin(alias, table.column('id').eq(alias.column('id'))));
        return assert.equal(manager.joinSql().toString(), 'INNER JOIN "users" "users_2" "users"."id" = "users_2"."id"');
      });
      it('returns outer join sql', function() {
        var alias, manager, table;
        table = new Table('users');
        alias = table.alias();
        manager = new SelectManager();
        manager.from(new Nodes.LeftOuterJoin(alias, table.column('id').eq(alias.column('id'))));
        return assert.equal(manager.joinSql().toString(), 'LEFT OUTER JOIN "users" "users_2" "users"."id" = "users_2"."id"');
      });
      it('return string join sql', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(new Nodes.StringJoin('hello'));
        return assert.equal(manager.joinSql().toString(), "'hello'");
      });
      return it('returns nil join sql', function() {
        var manager;
        manager = new SelectManager();
        return assert.isNull(manager.joinSql());
      });
    });
    describe('order clauses', function() {
      return it('returns order clauses as a list', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table);
        manager.order(table.column('id'));
        return assert.equal(manager.orderClauses()[0], '"users"."id"');
      });
    });
    describe('group', function() {
      it('takes an attribute', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table);
        manager.group(table.column('id'));
        return assert.equal(manager.toSql(), 'SELECT FROM "users" GROUP BY "users"."id"');
      });
      it('chaining', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        return assert.equal(manager.group(table.column('id')).constructor.name, manager.constructor.name);
      });
      it('takes multiple args', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table);
        manager.group(table.column('id'), table.column('name'));
        return assert.equal(manager.toSql(), 'SELECT FROM "users" GROUP BY "users"."id", "users"."name"');
      });
      return it('it makes strings literals', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table);
        manager.group('foo');
        return assert.equal(manager.toSql(), 'SELECT FROM "users" GROUP BY foo');
      });
    });
    describe('where sql', function() {
      it('gives me back the where sql', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table);
        manager.where(table.column('id').eq(10));
        return assert.equal(manager.whereSql(), 'WHERE "users"."id" = 10');
      });
      return it('returns null when there are no wheres', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table);
        return assert.equal(manager.whereSql(), null);
      });
    });
    describe('project', function() {
      it('takes multiple args', function() {
        var manager;
        manager = new SelectManager();
        manager.project(new Nodes.SqlLiteral('foo'), new Nodes.SqlLiteral('bar'));
        return assert.equal(manager.toSql(), 'SELECT foo, bar');
      });
      it('takes strings', function() {
        var manager;
        manager = new SelectManager();
        manager.project(Rel.sql('*'));
        return assert.equal(manager.toSql(), 'SELECT *');
      });
      return it('takes sql literals', function() {
        var manager;
        manager = new SelectManager();
        manager.project(new Nodes.SqlLiteral('*'));
        return assert.equal(manager.toSql(), 'SELECT *');
      });
    });
    describe('take', function() {
      it('knows take', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table).project(table.column('id'));
        manager.where(table.column('id').eq(1));
        manager.take(1);
        return assert.equal(manager.toSql(), 'SELECT "users"."id" FROM "users" WHERE "users"."id" = 1 LIMIT 1');
      });
      it('chains', function() {
        var manager;
        manager = new SelectManager();
        return assert.equal(manager.take(1).constructor, SelectManager);
      });
      return it('removes limit when null is passed to take only (not limit)', function() {
        var manager;
        manager = new SelectManager();
        manager.limit(10);
        manager.take(null);
        return assert.equal(manager.toSql(), 'SELECT');
      });
    });
    describe('join', function() {
      return it('joins itself', function() {
        var left, mgr, predicate, right;
        left = new Table('users');
        right = left.alias();
        predicate = left.column('id').eq(right.column('id'));
        mgr = left.join(right);
        mgr.project(new SqlLiteral('*'));
        assert.equal(mgr.on(predicate).constructor, SelectManager);
        return assert.equal(mgr.toSql(), 'SELECT * FROM "users" INNER JOIN "users" "users_2" ON "users"."id" = "users_2"."id"');
      });
    });
    describe('from', function() {
      it('makes sql', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table);
        manager.project(table.column('id'));
        return assert.equal(manager.toSql(), 'SELECT "users"."id" FROM "users"');
      });
      return it('chains', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        assert.equal(manager.from(table).project(table.column('id')).constructor, SelectManager);
        return assert.equal(manager.toSql(), 'SELECT "users"."id" FROM "users"');
      });
    });
    describe('bools', function() {
      return it('work', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table);
        manager.project(table.column('id'));
        manager.where(table.column('underage').eq(true));
        return assert.equal(manager.toSql(), 'SELECT "users"."id" FROM "users" WHERE "users"."underage" = true');
      });
    });
    describe('not', function() {
      return it('works', function() {
        var manager, table;
        table = new Table('users');
        manager = new SelectManager();
        manager.from(table);
        manager.project(table.column('id'));
        manager.where(table.column('age').gt(18).not());
        return assert.equal(manager.toSql(), 'SELECT "users"."id" FROM "users" WHERE NOT ("users"."age" > 18)');
      });
    });
    describe('subqueries', function() {
      it('work in from', function() {
        var a, b, q;
        a = Rel.select().project(new Nodes.As(1, new Nodes.UnqualifiedName('x'))).as('a');
        b = Rel.select().project(new Nodes.As(1, new Nodes.UnqualifiedName('x'))).as('b');
        q = Rel.select().from(a).join(b, Nodes.LeftOuterJoin).on(a.column('x').eq(b.column('x'))).project(Rel.star());
        return assert.equal(q.toSql(), 'SELECT * FROM (SELECT 1 AS "x") "a" LEFT OUTER JOIN (SELECT 1 AS "x") "b" ON "a"."x" = "b"."x"');
      });
      return it('work in project', function() {
        var a, b, q;
        a = Rel.select().project(1);
        b = Rel.select().project(1);
        q = Rel.select().project(a.eq(b));
        return assert.equal(q.toSql(), 'SELECT (SELECT 1) = (SELECT 1)');
      });
    });
    it('all comparators work', function() {
      var q, tab;
      tab = Rel.table('x');
      q = Rel.select().project(tab.column('x').lt(2), tab.column('x').lteq(2), tab.column('x').gt(2), tab.column('x').gteq(2), tab.column('x').notEq(2), tab.column('x').isNull(), tab.column('x').notNull(), tab.column('x').like('%John%'), tab.column('x').ilike('%john%')).toSql();
      return assert.equal(q, "SELECT \"x\".\"x\" < 2, \"x\".\"x\" <= 2, \"x\".\"x\" > 2, \"x\".\"x\" >= 2, \"x\".\"x\" <> 2, \"x\".\"x\" IS NULL, \"x\".\"x\" IS NOT NULL, \"x\".\"x\" LIKE '%John%', \"x\".\"x\" ILIKE '%john%'");
    });
    it('nulls', function() {
      return assert.equal(Rel.select().project(null).toSql(), 'SELECT NULL');
    });
    describe('case', function() {
      return it('works', function() {
        var q, u;
        u = Rel.table('users');
        q = Rel.select().from(u).project(Rel["case"]().when(u.column('age').lt(18), 'underage').when(u.column('age').gteq(18), 'OK')["else"](null).end(), Rel["case"](u.column('protection')).when('private', true).when('public', false).end().as('private'));
        return assert.equal(q.toSql(), "SELECT\nCASE\nWHEN \"users\".\"age\" < 18 THEN 'underage'\nWHEN \"users\".\"age\" >= 18 THEN 'OK'\nELSE NULL\nEND,\nCASE \"users\".\"protection\"\nWHEN 'private' THEN true\nWHEN 'public' THEN false\nEND AS \"private\"\nFROM \"users\"".replace(/\s+/g, ' ').trim());
      });
    });
    return it('constant literals', function() {
      assert.equal(Rel.select().project(Rel.lit(false).not()).toSql(), "SELECT NOT (false)");
      assert.equal(Rel.select().project(Rel.lit(3).eq(Rel.lit(3))).toSql(), "SELECT 3 = 3");
      return assert.equal(Rel.select().project(Rel.lit('a')["in"](Rel.lit(['a']))).toSql(), "SELECT 'a' IN ('a')");
    });
  });
});
