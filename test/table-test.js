// Generated by CoffeeScript 1.10.0
var InsertManager, Nodes, SelectManager, SqlLiteral, Table, assert;

assert = require('chai').assert;

Table = require('../lib/table');

SelectManager = require('../lib/select-manager');

InsertManager = require('../lib/insert-manager');

SqlLiteral = require('../lib/nodes/sql-literal');

Nodes = require('../lib/nodes/nodes');

describe('Table stuff', function() {
  return describe('A table', function() {
    beforeEach(function() {
      return this.table = new Table('users');
    });
    it('has a from method', function() {
      return assert.isNotNull(this.table.from('user'));
    });
    it('can project things', function() {
      return assert.isNotNull(this.table.project(new require('../lib/nodes/sql-literal')('*')));
    });
    it('should return sql', function() {
      return assert.equal(this.table.project(new SqlLiteral('*')).toSql(), "SELECT * FROM \"users\"");
    });
    it('should create string join nodes', function() {
      var join;
      join = this.table.createStringJoin('foo');
      return assert.equal(join.constructor, Nodes.StringJoin);
    });
    it('should create join nodes', function() {
      var join;
      join = this.table.createJoin('foo', 'bar');
      assert.equal(join.constructor, Nodes.InnerJoin);
      assert.equal(join.left, 'foo');
      return assert.equal(join.right, 'bar');
    });
    it('should create join nodes with a class', function() {
      var join;
      join = this.table.createJoin('foo', 'bar', Nodes.LeftOuterJoin);
      assert.equal(join.constructor, Nodes.LeftOuterJoin);
      assert.equal(join.left, 'foo');
      return assert.equal(join.right, 'bar');
    });
    it('should return an insert manager', function() {
      var im;
      im = this.table.compileInsert('VALUES(NULL)');
      assert.equal(InsertManager, im.constructor);
      return assert.equal(im.toSql(), 'INSERT INTO NULL VALUES(NULL)');
    });
    it('should return IM from insertManager', function() {
      var im;
      im = this.table.insertManager();
      return assert.equal(InsertManager, im.constructor);
    });
    it('skip: should add an offset', function() {
      var sm;
      sm = this.table.skip(2);
      return assert.equal(sm.toSql(), 'SELECT FROM "users" OFFSET 2');
    });
    it('selectManager: should return a select manager', function() {
      var sm;
      sm = this.table.selectManager();
      return assert.equal(sm.toSql(), 'SELECT');
    });
    it('having: adds a having clause', function() {
      var mgr;
      mgr = this.table.having(this.table.column('id').eq(10));
      return assert.equal(mgr.toSql(), 'SELECT FROM "users" HAVING "users"."id" = 10');
    });
    it('group: should create a group', function() {
      var mgr;
      mgr = this.table.group(this.table.column('id'));
      return assert.equal(mgr.toSql(), 'SELECT FROM "users" GROUP BY "users"."id"');
    });
    it('alias: should create a node that proxies a table', function() {
      var node;
      assert.equal(this.table.aliases.length, 0);
      node = this.table.alias();
      assert.equal(this.table.aliases.length, 1);
      assert.equal(node.name, 'users_2');
      return assert.equal(node.column('id').relation, node);
    });
    it('new: takes a hash', function() {
      var rel;
      rel = new Table('users', {
        as: 'users'
      });
      return assert.isNotNull(rel.tableAlias);
    });
    it('order: should take an order', function() {
      var mgr;
      mgr = this.table.order('foo');
      return assert.equal(mgr.toSql(), 'SELECT FROM "users" ORDER BY foo');
    });
    it('take: should add a limit', function() {
      var mgr;
      mgr = this.table.take(1);
      mgr.project(new SqlLiteral('*'));
      return assert.equal(mgr.toSql(), 'SELECT * FROM "users" LIMIT 1');
    });
    it('project: can project', function() {
      var mgr;
      mgr = this.table.project(new SqlLiteral('*'));
      return assert.equal(mgr.toSql(), 'SELECT * FROM "users"');
    });
    it('project: takes multiple parameters', function() {
      var mgr;
      mgr = this.table.project(new SqlLiteral('*'), new SqlLiteral('*'));
      return assert.equal(mgr.toSql(), 'SELECT *, * FROM "users"');
    });
    it('where: returns a tree manager', function() {
      var mgr;
      mgr = this.table.where(this.table.column('id').eq(1));
      mgr.project(this.table.column('id'));
      return assert.equal(mgr.toSql(), 'SELECT "users"."id" FROM "users" WHERE "users"."id" = 1');
    });
    it('should have a name', function() {
      return assert.equal(this.table.name, 'users');
    });
    it('column', function() {
      var column;
      column = this.table.column('id');
      return assert.equal(column.name, 'id');
    });
    return it('star', function() {
      return assert.equal(this.table.project(this.table.star()).toSql(), 'SELECT "users".* FROM "users"');
    });
  });
});
