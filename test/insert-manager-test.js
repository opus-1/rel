// Generated by CoffeeScript 1.10.0
var InsertManager, Nodes, Rel, SelectManager, SqlLiteral, Table, assert;

assert = require('chai').assert;

SelectManager = require('../lib/select-manager');

InsertManager = require('../lib/insert-manager');

Table = require('../lib/table');

SqlLiteral = require('../lib/nodes/sql-literal');

Rel = require('../lib/rel');

Nodes = require('../lib/nodes/nodes');

describe('Inserting stuff', function() {
  return describe('An insert manager', function() {
    it('can create a Values node', function() {
      var manager, table, values;
      table = new Table('users');
      manager = new InsertManager();
      values = manager.createValues(['a', 'b'], ['c', 'd']);
      assert.equal(values.left.length, ['a', 'b'].length);
      return assert.equal(values.right.length, ['c', 'd'].length);
    });
    it('allows sql literals', function() {
      var manager, table;
      table = new Table('users');
      manager = new InsertManager();
      manager.values(manager.createValues([Rel.star()], ['a']));
      return assert.equal(manager.toSql(), 'INSERT INTO NULL VALUES (*)');
    });
    it('inserts false', function() {
      var manager, table;
      table = new Table('users');
      manager = new InsertManager();
      manager.insert([[table.column('bool'), false]]);
      return assert.equal(manager.toSql(), 'INSERT INTO "users" ("bool") VALUES (false)');
    });
    it('inserts null', function() {
      var manager, table;
      table = new Table('users');
      manager = new InsertManager();
      manager.insert([[table.column('id'), null]]);
      return assert.equal(manager.toSql(), 'INSERT INTO "users" ("id") VALUES (NULL)');
    });
    it('inserts time', function() {
      var attribute, manager, table, time;
      table = new Table('users');
      manager = new InsertManager();
      time = new Date();
      attribute = table.column('created_at');
      manager.insert([[attribute, time]]);
      return assert.equal(manager.toSql(), "INSERT INTO \"users\" (\"created_at\") VALUES ('" + (time.toISOString()) + "')");
    });
    it('takes a list of lists', function() {
      var manager, table;
      table = new Table('users');
      manager = new InsertManager();
      manager.into(table);
      manager.insert([[table.column('id'), 1], [table.column('name'), 'carl']]);
      return assert.equal(manager.toSql(), 'INSERT INTO "users" ("id", "name") VALUES (1, \'carl\')');
    });
    it('defaults the table', function() {
      var manager, table;
      table = new Table('users');
      manager = new InsertManager();
      manager.insert([[table.column('id'), 1], [table.column('name'), 'carl']]);
      return assert.equal(manager.toSql(), 'INSERT INTO "users" ("id", "name") VALUES (1, \'carl\')');
    });
    it('it takes an empty list', function() {
      var manager;
      manager = new InsertManager();
      manager.insert([]);
      return assert.strictEqual(manager.ast.values, null);
    });
    describe('into', function() {
      return it('converts to sql', function() {
        var manager, table;
        table = new Table('users');
        manager = new InsertManager();
        manager.into(table);
        return assert.equal(manager.toSql(), 'INSERT INTO "users"');
      });
    });
    describe('columns', function() {
      return it('converts to sql', function() {
        var manager, table;
        table = new Table('users');
        manager = new InsertManager();
        manager.into(table);
        manager.columns().push(table.column('id'));
        return assert.equal(manager.toSql(), 'INSERT INTO "users" ("id")');
      });
    });
    describe('values', function() {
      return it('converts to sql', function() {
        var manager, table;
        table = new Table('users');
        manager = new InsertManager();
        manager.into(table);
        manager.values(new Nodes.Values([1]));
        return assert.equal(manager.toSql(), 'INSERT INTO "users" VALUES (1)');
      });
    });
    return describe('combo', function() {
      return it('puts shit together', function() {
        var manager, table;
        table = new Table('users');
        manager = new InsertManager();
        manager.into(table);
        manager.values(new Nodes.Values([1, 'carl']));
        manager.columns().push(table.column('id'));
        manager.columns().push(table.column('name'));
        return assert.equal(manager.toSql(), 'INSERT INTO "users" ("id", "name") VALUES (1, \'carl\')');
      });
    });
  });
});
