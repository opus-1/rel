// Generated by CoffeeScript 1.10.0
var Nodes, Rel, SqlLiteral, Table, UpdateManager, assert;

assert = require('chai').assert;

UpdateManager = require('../lib/update-manager');

Table = require('../lib/table');

SqlLiteral = require('../lib/nodes/sql-literal');

Rel = require('../lib/rel');

Nodes = require('../lib/nodes/nodes');

describe('Updating stuff', function() {
  return describe('An update manager', function() {
    describe('set', function() {
      it('updates with null', function() {
        var table, um;
        table = new Table('users');
        um = new UpdateManager();
        um.table(table);
        um.set([[table.column('name'), null]]);
        return assert.equal(um.toSql(), 'UPDATE "users" SET "name" = NULL');
      });
      it('takes a string', function() {
        var table, um;
        table = new Table('users');
        um = new UpdateManager();
        um.table(table);
        um.set(new Nodes.SqlLiteral("foo = bar"));
        return assert.equal(um.toSql(), 'UPDATE "users" SET foo = bar');
      });
      it('takes a list of lists', function() {
        var table, um;
        table = new Table('users');
        um = new UpdateManager();
        um.table(table);
        um.set([[table.column('id'), 1], [table.column('name'), 'hello']]);
        return assert.equal(um.toSql(), 'UPDATE "users" SET "id" = 1, "name" = \'hello\'');
      });
      return it('chains', function() {
        var table, um;
        table = new Table('users');
        um = new UpdateManager();
        return assert.equal(um.set([[table.column('id'), 1], [table.column('name'), 'hello']]).constructor, UpdateManager);
      });
    });
    describe('table', function() {
      it('generates an update statement', function() {
        var um;
        um = new UpdateManager();
        um.table(new Table('users'));
        return assert.equal(um.toSql(), 'UPDATE "users"');
      });
      return it('chains', function() {
        var um;
        um = new UpdateManager();
        return assert.equal(um.table(new Table('users')).constructor, UpdateManager);
      });
    });
    return describe('where', function() {
      it('generates a where clause', function() {
        var table, um;
        table = new Table('users');
        um = new UpdateManager();
        um.table(table);
        um.where(table.column('id').eq(1));
        return assert.equal(um.toSql(), 'UPDATE "users" WHERE "users"."id" = 1');
      });
      return it('chains', function() {
        var table, um;
        table = new Table('users');
        um = new UpdateManager();
        um.table(table);
        return assert.equal(um.where(table.column('id').eq(1)).constructor, UpdateManager);
      });
    });
  });
});
