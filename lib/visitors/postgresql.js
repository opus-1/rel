// Generated by CoffeeScript 1.10.0
var Postgresql, ToSql, exports,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ToSql = require('./to-sql');


escapeLiteral = function(str) {

  var hasBackslash = false;
  var escaped = '\'';

  for(var i = 0; i < str.length; i++) {
    var c = str[i];
    if(c === '\'') {
      escaped += c + c;
    } else if (c === '\\') {
      escaped += c + c;
      hasBackslash = true;
    } else {
      escaped += c;
    }
  }

  escaped += '\'';

  if(hasBackslash === true) {
    escaped = ' E' + escaped;
  }

  return escaped;
};
;

Postgresql = (function(superClass) {
  extend(Postgresql, superClass);

  function Postgresql() {
    return Postgresql.__super__.constructor.apply(this, arguments);
  }

  Postgresql.prototype.quote = function(value, column) {
    if (column == null) {
      column = null;
    }
    if (value === null) {
      return 'NULL';
    } else if (value.constructor === Boolean) {
      if (value === true) {
        return "true";
      } else {
        return "false";
      }
    } else if (value.constructor === Date) {
      return this.quote(value.toISOString());
    } else if (value.constructor === Number) {
      return value;
    } else {
      return escapeLiteral(value);
    }
  };

  return Postgresql;

})(ToSql);

exports = module.exports = Postgresql;
