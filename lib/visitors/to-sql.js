// Generated by CoffeeScript 1.10.0
var Attributes, Nodes, SqlLiteral, ToSql, Visitor, exports, u,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

u = require('underscore');

Visitor = require('./visitor');

Nodes = require('../nodes/nodes');

SqlLiteral = require('../nodes/sql-literal');

Attributes = require('../attributes');

require('date-utils');

ToSql = (function(superClass) {
  extend(ToSql, superClass);

  function ToSql() {
    this.connection = null;
    this.pool = null;
    this.lastColumn = null;
  }

  ToSql.prototype.accept = function(object) {
    this.last_column = null;
    this.pool = null;
    if (this.pool != null) {
      this.pool.withConnection((function(_this) {
        return function(conn) {
          return _this.connection = conn;
        };
      })(this));
    }
    return ToSql.__super__.accept.call(this, object);
  };

  ToSql.prototype.visitRelNodesDeleteStatement = function(o) {
    return u([
      "DELETE FROM " + (this.visit(o.relation)), (!u(o.wheres).isEmpty() ? "WHERE " + ((u(o.wheres).map((function(_this) {
        return function(x) {
          return _this.visit(x);
        };
      })(this))).join('AND ')) : void 0)
    ]).compact().join(' ');
  };

  ToSql.prototype.visitRelNodesSelectManager = function(o) {
    return "(" + (this.visit(o.ast)) + ")";
  };

  ToSql.prototype.buildSubSelect = function(key, o) {
    var core, stmt;
    stmt = new Nodes.SelectStatement;
    core = u(stmt.cores).first();
    core.froms = o.relation;
    core.wheres = o.wheres;
    core.projections = [key];
    stmt.limit = o.limit;
    stmt.orders = o.orders;
    return stmt;
  };

  ToSql.prototype.visitRelNodesUpdateStatement = function(o) {
    var key, wheres;
    wheres = u(o.orders).isEmpty() && (o.limit == null) ? o.wheres : (key = o.key, [new Nodes.In(key, [this.buildSubselect(key, o)])]);
    return u([
      "UPDATE " + (this.visit(o.relation)), (!u(o.values).isEmpty() ? "SET " + ((o.values.map((function(_this) {
        return function(value) {
          return _this.visit(value);
        };
      })(this))).join(', ')) : void 0), (!u(o.wheres).isEmpty() ? "WHERE " + ((wheres.map((function(_this) {
        return function(x) {
          return _this.visit(x);
        };
      })(this))).join(' AND ')) : void 0)
    ]).compact().join(' ');
  };

  ToSql.prototype.buildSubselect = function(key, o) {
    var core, stmt;
    stmt = new Nodes.SelectStatement();
    core = stmt.cores[0];
    core.froms = o.relation;
    core.wheres = o.wheres;
    core.projections = [key];
    stmt.limit = o.limit;
    stmt.orders = o.orders;
    return stmt;
  };

  ToSql.prototype.visitRelNodesAssignment = function(o) {
    var right;
    right = this.quote(o.right, this.columnFor(o.left));
    return (this.visit(o.left)) + " = " + right;
  };

  ToSql.prototype.visitRelNodesUnqualifiedName = function(o) {
    return this.quoteColumnName(o.name());
  };

  ToSql.prototype.visitRelNodesInsertStatement = function(o) {
    return u([
      "INSERT INTO " + (o.relation != null ? this.visit(o.relation) : 'NULL'), (!u(o.columns).isEmpty() ? "(" + ((u(o.columns).map((function(_this) {
        return function(x) {
          return _this.quoteColumnName(x);
        };
      })(this))).join(', ')) + ")" : void 0), (o.values != null ? this.visit(o.values) : void 0)
    ]).compact().join(' ');
  };

  ToSql.prototype.visitRelNodesValues = function(o) {
    return "VALUES (" + ((u(o.expressions()).map((function(_this) {
      return function(expr) {
        if (expr === null) {
          return _this.quote(expr, null);
        } else if (expr.constructor === SqlLiteral) {
          return _this.visitRelNodesSqlLiteral(expr);
        } else {
          return _this.quote(expr, null);
        }
      };
    })(this))).join(', ')) + ")";
  };

  ToSql.prototype.visitRelNodesExist = function(o) {
    return "EXISTS (" + (this.visit(o.expressions)) + ")" + (o.alias ? " AS " + (visit(o.alias)) : '');
  };

  ToSql.prototype.tableExists = function(name) {
    return false;
  };

  ToSql.prototype.visitRelNodesSelectStatement = function(o) {
    return u([
      (o["with"] != null ? this.visit(o["with"]) : void 0), (o.cores.map((function(_this) {
        return function(x) {
          return _this.visitRelNodesSelectCore(x);
        };
      })(this))).join(), (!u(o.orders).isEmpty() ? "ORDER BY " + ((o.orders.map((function(_this) {
        return function(x) {
          return _this.visit(x);
        };
      })(this))).join(', ')) : void 0), (o.limit != null ? this.visit(o.limit) : void 0), (o.offset != null ? this.visit(o.offset) : void 0), (o.lock != null ? this.visit(o.lock) : void 0)
    ]).compact().join(' ');
  };

  ToSql.prototype.visitRelNodesSelectCore = function(o) {
    return u([
      "SELECT", (o.top != null ? this.visit(o.top) : void 0), "" + ((o.projections.map((function(_this) {
        return function(x) {
          return _this.visit(x);
        };
      })(this))).join(', ')), this.visit(o.source), (!u(o.wheres).isEmpty() ? "WHERE " + ((o.wheres.map((function(_this) {
        return function(x) {
          return _this.visit(x);
        };
      })(this))).join(' AND ')) : void 0), (!u(o.groups).isEmpty() ? "GROUP BY " + ((o.groups.map((function(_this) {
        return function(x) {
          return _this.visit(x);
        };
      })(this))).join(', ')) : void 0), (o.having != null ? this.visit(o.having) : void 0)
    ]).compact().join(' ');
  };

  ToSql.prototype.visitRelNodesJoinSource = function(o) {
    if (!((o.left != null) || !u(o.right).isEmpty())) {
      return;
    }
    return u([
      "FROM", (o.left != null ? this.visit(o.left) : void 0), (o.right != null ? (o.right.map((function(_this) {
        return function(j) {
          return _this.visit(j);
        };
      })(this))).join(' ') : void 0)
    ]).compact().join(' ');
  };

  ToSql.prototype.visitRelNodesTable = function(o) {
    if (o.tableAlias != null) {
      return (this.quoteTableName(o.name)) + " " + (quoteTableName(o.tableAlias));
    } else {
      return this.quoteTableName(o.name);
    }
  };

  ToSql.prototype.quoteTableName = function(name) {
    if (Nodes.SqlLiteral === name.constructor) {
      return name;
    } else {
      return "\"" + name + "\"";
    }
  };

  ToSql.prototype.quoteColumnName = function(name) {
    if (Nodes.SqlLiteral === name.constructor) {
      return name;
    } else if (Attributes.Attribute === name.constructor) {
      return "\"" + name.name + "\"";
    } else {
      return "\"" + name + "\"";
    }
  };

  ToSql.prototype.visitRelNodesArray = function(o) {
    if (u(o).empty != null) {
      return 'NULL';
    } else {
      return (o.map((function(_this) {
        return function(x) {
          return _this.visit(x);
        };
      })(this))).join(', ');
    }
  };

  ToSql.prototype.literal = function(o) {
    return o;
  };

  ToSql.prototype.visitRelNodesSqlLiteral = function(o) {
    return this.literal(o);
  };

  ToSql.prototype.visitRelNodesOrdering = function(o) {
    return (this.visit(o.left)) + " " + (o.right.toUpperCase());
  };

  ToSql.prototype.visitRelNodesGroup = function(o) {
    return this.visit(o.expr);
  };

  ToSql.prototype.visitRelNodesAttribute = function(o) {
    var joinName;
    this.lastColumn = this.columnFor(o);
    joinName = (o.relation.tableAlias || o.relation.name).toString();
    return (this.quoteTableName(joinName)) + "." + (this.quoteColumnName(o.name));
  };

  ToSql.prototype.visitRelNodesTableStar = function(o) {
    var joinName, rel;
    rel = o.expr;
    joinName = rel.tableAlias || rel.name;
    return (this.quoteTableName(joinName)) + ".*";
  };

  ToSql.prototype.visitRelNodesAttrInteger = function(o) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.visitRelNodesAttrFloat = function(o) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.visitRelNodesAttrString = function(o) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.visitRelNodesAttrTime = function(o) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.visitRelNodesAttrBoolean = function(o) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.quoted = function(o) {
    return this.quote(o, this.last_column);
  };

  ToSql.prototype.visitRelNodesString = function(o) {
    return this.quoted(o);
  };

  ToSql.prototype.visitRelNodesDate = function(o) {
    return this.quoted(o);
  };

  ToSql.prototype.visitRelNodesBoolean = function(o) {
    return this.quoted(o);
  };

  ToSql.prototype.visitRelNodesNumber = function(o) {
    return this.literal(o);
  };

  ToSql.prototype.visitRelNodesConstLit = function(o) {
    return this.visit(o.expr);
  };

  ToSql.prototype.quote = function(value, column) {
    if (column == null) {
      column = null;
    }
    if (value === null) {
      return 'NULL';
    } else if (value.constructor === Boolean) {
      if (value === true) {
        return "'t'";
      } else {
        return "'f'";
      }
    } else if (value.constructor === Date) {
      return this.quote(value.toDBString());
    } else if (value.constructor === Number) {
      return value;
    } else {
      return "\"" + value + "\"";
    }
  };

  ToSql.prototype.columnFor = function(attr) {
    return attr.name.toString();
  };

  ToSql.prototype.visitRelNodesHaving = function(o) {
    return "HAVING " + (this.visit(o.expr));
  };

  ToSql.prototype.visitRelNodesAnd = function(o) {
    return (o.children.map((function(_this) {
      return function(x) {
        return _this.visit(x);
      };
    })(this))).join(' AND ');
  };

  ToSql.prototype.visitRelNodesOr = function(o) {
    return (this.visit(o.left)) + " OR " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesInnerJoin = function(o) {
    return "INNER JOIN " + (this.visit(o.left)) + " " + ((o.right != null) && u(o.right).any() ? this.visit(o.right) : void 0);
  };

  ToSql.prototype.visitRelNodesOn = function(o) {
    return "ON " + (this.visit(o.expr));
  };

  ToSql.prototype.visitRelNodesTableAlias = function(o) {
    return (this.visit(o.relation)) + " " + (this.quoteTableName(o.name.toString()));
  };

  ToSql.prototype.visitRelNodesOffset = function(o) {
    return "OFFSET " + (this.visit(o.expr));
  };

  ToSql.prototype.visitRelNodesExists = function(o) {
    var e;
    e = o.alias ? " AS " + (this.visit(o.alias)) : '';
    return "EXISTS (" + (this.visit(o.expressions)) + ")" + e;
  };

  ToSql.prototype.visitRelNodesUnion = function(o) {
    return "(" + (this.visit(o.left)) + ") UNION (" + (this.visit(o.right)) + ")";
  };

  ToSql.prototype.visitRelNodesLike = function(o) {
    return (this.visit(o.left)) + " LIKE " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesILike = function(o) {
    return (this.visit(o.left)) + " ILIKE " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesLessThan = function(o) {
    return (this.visit(o.left)) + " < " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesLessThanOrEqual = function(o) {
    return (this.visit(o.left)) + " <= " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesGreaterThan = function(o) {
    return (this.visit(o.left)) + " > " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesGreaterThanOrEqual = function(o) {
    return (this.visit(o.left)) + " >= " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesNotEqual = function(o) {
    return (this.visit(o.left)) + " <> " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesNot = function(o) {
    return "NOT (" + (this.visit(o.expr)) + ")";
  };

  ToSql.prototype.visitRelNodesUnionAll = function(o) {
    return "(" + (this.visit(o.left)) + ") UNION ALL (" + (this.visit(o.right)) + ")";
  };

  ToSql.prototype.visitRelNodesExcept = function(o) {
    return "(" + (this.visit(o.left)) + ") EXCEPT (" + (this.visit(o.right)) + ")";
  };

  ToSql.prototype.visitRelNodesIn = function(o) {
    return (this.visit(o.left)) + " IN (" + (this.visit(o.right)) + ")";
  };

  ToSql.prototype.visitRelNodesBetween = function(o) {
    return (this.visit(o.left)) + " BETWEEN (" + (this.visit(o.right)) + ")";
  };

  ToSql.prototype.visitRelNodesIntersect = function(o) {
    return "(" + (this.visit(o.left)) + ") INTERSECT (" + (this.visit(o.right)) + ")";
  };

  ToSql.prototype._withHelper = function(rec, o) {
    var x;
    return "WITH" + rec + " " + (((function() {
      var i, len, ref, results;
      ref = o.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        results.push((this.visit(x.left)) + " AS (" + (this.visit(x.right)) + ")");
      }
      return results;
    }).call(this)).join(', '));
  };

  ToSql.prototype.visitRelNodesWith = function(o) {
    return this._withHelper('', o);
  };

  ToSql.prototype.visitRelNodesWithRecursive = function(o) {
    return this._withHelper(' RECURSIVE', o);
  };

  ToSql.prototype.visitRelNodesAs = function(o) {
    return (this.visit(o.left)) + " AS " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesEquality = function(o) {
    var right;
    right = o.right;
    if (right != null) {
      return (this.visit(o.left)) + " = " + (this.visit(right));
    } else {
      return (this.visit(o.left)) + " IS NULL";
    }
  };

  ToSql.prototype.visitRelNodesLock = function(o) {};

  ToSql.prototype._visitOuterJoin = function(o, joinType) {
    return joinType + " OUTER JOIN " + (this.visit(o.left)) + " " + (this.visit(o.right));
  };

  ToSql.prototype.visitRelNodesLeftOuterJoin = function(o) {
    return this._visitOuterJoin(o, 'LEFT');
  };

  ToSql.prototype.visitRelNodesRightOuterJoin = function(o) {
    return this._visitOuterJoin(o, 'RIGHT');
  };

  ToSql.prototype.visitRelNodesFullOuterJoin = function(o) {
    return this._visitOuterJoin(o, 'FULL');
  };

  ToSql.prototype.visitRelNodesStringJoin = function(o) {
    return this.visit(o.left);
  };

  ToSql.prototype.visitRelNodesTop = function(o) {
    return "";
  };

  ToSql.prototype.visitRelNodesLimit = function(o) {
    return "LIMIT " + (this.visit(o.expr));
  };

  ToSql.prototype.visitRelNodesGrouping = function(o) {
    return "(" + (this.visit(o.expr)) + ")";
  };

  ToSql.prototype.visitRelNodesFunctionNode = function(o) {
    var x;
    return (this.visit(o.alias)) + "(" + ((function() {
      var i, len, ref, results;
      ref = o.expressions;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        results.push(this.visit(x));
      }
      return results;
    }).call(this)) + ")";
  };

  ToSql.prototype.visitRelNodesCase = function(o) {
    var cond, res;
    return u([
      'CASE', o._base !== void 0 ? this.visit(o._base) : void 0, (function() {
        var i, len, ref, ref1, results;
        ref = o._cases;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          ref1 = ref[i], cond = ref1[0], res = ref1[1];
          results.push("WHEN " + (this.visit(cond)) + " THEN " + (this.visit(res)));
        }
        return results;
      }).call(this), o._else !== void 0 ? "ELSE " + (this.visit(o._else)) : void 0, 'END'
    ]).chain().flatten().compact().value().join(' ');
  };

  ToSql.prototype.visitRelNodesNull = function() {
    return 'NULL';
  };

  ToSql.prototype.visitRelNodesIsNull = function(o) {
    return (this.visit(o.expr)) + " IS NULL";
  };

  ToSql.prototype.visitRelNodesNotNull = function(o) {
    return (this.visit(o.expr)) + " IS NOT NULL";
  };

  return ToSql;

})(Visitor);

exports = module.exports = ToSql;
