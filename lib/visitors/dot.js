// Generated by CoffeeScript 1.10.0
var Dot, Edge, Node, Visitor, exports, u,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

u = require('underscore');

Visitor = require('./visitor');

Node = (function() {
  function Node(name1, id, fields) {
    this.name = name1;
    this.id = id;
    this.fields = fields != null ? fields : [];
  }

  return Node;

})();

Edge = (function() {
  function Edge(name1, from, to) {
    this.name = name1;
    this.from = from;
    this.to = to;
  }

  return Edge;

})();

Dot = (function(superClass) {
  extend(Dot, superClass);

  function Dot() {
    this.nodes = [];
    this.edges = [];
    this.nodeStack = [];
    this.edgeStack = [];
    this.seen = {};
  }

  Dot.prototype.accept = function(object) {
    Dot.__super__.accept.call(this, object);
    return this.toDot();
  };

  Dot.prototype.visitRelNodesOrdering = function(o) {
    this.visitEdge(o, 'expr');
    return this.visitEdge(o, 'direction');
  };

  Dot.prototype.visitRelNodesTableAlias = function(o) {
    this.visitEdge(o, 'name');
    return this.visitEdge(o, 'relation');
  };

  Dot.prototype.visitRelNodesCount = function(o) {
    this.visitEdge(o, 'expressions');
    return this.visitEdge(o, 'distinct');
  };

  Dot.prototype.visitRelNodesValues = function(o) {
    return this.visitEdge(o, 'expressions');
  };

  Dot.prototype.visitRelNodesStringJoin = function(o) {
    return this.visitEdge(o, 'left');
  };

  Dot.prototype.visitRelNodesInnerJoin = function(o) {
    this.visitEdge(o, 'left');
    return this.visitEdge(o, 'right');
  };

  Dot.prototype.visitRelNodesOuterJoin = function(o) {
    return this.visitRelNodesInnerJoin(o);
  };

  Dot.prototype.visitRelNodesDeleteStatement = function(o) {
    this.visitEdge(o, 'relation');
    return this.visitEdge(o, 'wheres');
  };

  Dot.prototype.unary = function(o) {
    return this.visitEdge(o, 'expr');
  };

  Dot.prototype.visitRelNodesGroup = function(o) {
    return this.unary(o);
  };

  Dot.prototype.visitRelNodesGrouping = function(o) {
    return this.unary(o);
  };

  Dot.prototype.visitRelNodesHaving = function(o) {
    return this.unary(o);
  };

  Dot.prototype.visitRelNodesLimit = function(o) {
    return this.unary(o);
  };

  Dot.prototype.visitRelNodesNot = function(o) {
    return this.unary(o);
  };

  Dot.prototype.visitRelNodesOffset = function(o) {
    return this.unary(o);
  };

  Dot.prototype.visitRelNodesOn = function(o) {
    return this.unary(o);
  };

  Dot.prototype.visitRelNodesTop = function(o) {
    return this.unary(o);
  };

  Dot.prototype.visitRelNodesUnqualifiedName = function(o) {
    return this.unary(o);
  };

  Dot.prototype.func = function(o) {
    this.visitEdge(o, 'expressions');
    this.visitEdge(o, 'distinct');
    return this.visitEdge(o, 'alias');
  };

  Dot.prototype.visitRelNodesExists = function(o) {
    return this.func(o);
  };

  Dot.prototype.visitRelNodesMin = function(o) {
    return this.func(o);
  };

  Dot.prototype.visitRelNodesMax = function(o) {
    return this.func(o);
  };

  Dot.prototype.visitRelNodesAvg = function(o) {
    return this.func(o);
  };

  Dot.prototype.visitRelNodesSum = function(o) {
    return this.func(o);
  };

  Dot.prototype.visitRelNamedFunction = function(o) {
    this.visitEdge(o, 'name');
    this.visitEdge(o, 'expressions');
    this.visitEdge(o, 'distinct');
    return this.visitEdge(o, 'alias');
  };

  Dot.prototype.visitRelNodesInsertStatement = function(o) {
    this.visitEdge(o, 'relation');
    this.visitEdge(o, 'columns');
    return this.visitEdge(o, 'values');
  };

  Dot.prototype.visitRelNodesSelectCore = function(o) {
    this.visitEdge(o, 'source');
    this.visitEdge(o, 'projections');
    return this.visitEdge(o, 'wheres');
  };

  Dot.prototype.visitRelNodesSelectStatement = function(o) {
    this.visitEdge(o, 'cores');
    this.visitEdge(o, 'limit');
    this.visitEdge(o, 'orders');
    return this.visitEdge(o, 'offset');
  };

  Dot.prototype.visitRelNodesUpdateStatement = function(o) {
    this.visitEdge(o, 'relation');
    this.visitEdge(o, 'wheres');
    return this.visitEdge(o, 'values');
  };

  Dot.prototype.visitRelTable = function(o) {
    return this.visitEdge(o, 'name');
  };

  Dot.prototype.visitRelAttribute = function(o) {
    this.visitEdge(o, 'relation');
    return this.visitEdge(o, 'name');
  };

  Dot.prototype.visitRelAttributesInteger = function(o) {
    return this.visitRelAttribute(o);
  };

  Dot.prototype.visitRelAttributesFloat = function(o) {
    return this.visitRelAttribute(o);
  };

  Dot.prototype.visitRelAttributesString = function(o) {
    return this.visitRelAttribute(o);
  };

  Dot.prototype.visitRelAttributesTime = function(o) {
    return this.visitRelAttribute(o);
  };

  Dot.prototype.visitRelAttributesBoolean = function(o) {
    return this.visitRelAttribute(o);
  };

  Dot.prototype.visitRelAttributesAttribute = function(o) {
    return this.visitRelAttribute(o);
  };

  Dot.prototype.nary = function(o) {
    return u(o.children).each((function(_this) {
      return function(x, i) {
        return _this.edge(i, function(x) {
          return _this.visit(x);
        });
      };
    })(this));
  };

  Dot.prototype.visitRelNodesAnd = function(o) {
    return this.nary(o);
  };

  Dot.prototype.binary = function(o) {
    this.visitEdge(o, 'left');
    return this.visitEdge(o, 'right');
  };

  Dot.prototype.visitRelNodesAs = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesAssignment = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesBetween = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesDoesNotMatch = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesEquality = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesGreaterThan = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesGreaterThanOrEqual = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesIn = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesJoinSource = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesLessThan = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesLessThanOrEqual = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesMatches = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesNotEqual = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesNotIn = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitRelNodesOr = function(o) {
    return this.binary(o);
  };

  Dot.prototype.visitString = function(o) {
    return u(this.nodeStack).last().fields.push(o);
  };

  Dot.prototype.visitTime = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitDate = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitDateTime = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitNullClass = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitTrueClass = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitFalseClass = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitRelSqlLiteral = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitInteger = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitFloat = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitRelNodesSqlLiteral = function(o) {
    return visitString(o);
  };

  Dot.prototype.visitHash = function(o) {
    return u(o).each((function(_this) {
      return function(value, key, index) {
        return _this.edge({
          key: value
        }, function() {
          return _this.visit({
            key: value
          });
        });
      };
    })(this));
  };

  Dot.prototype.visitArray = function(o) {
    return u(o).each((function(_this) {
      return function(x, i) {
        return _this.edge(i, function(x) {
          return visit(x);
        });
      };
    })(this));
  };

  Dot.prototype.visitEdge = function(o, method) {
    return this.edge(method, (function(_this) {
      return function() {
        return _this.visit(o[method]);
      };
    })(this));
  };

  Dot.prototype.visit = function(o) {
    var node;
    if (node = this.seen[o.object]) {
      this.edgeStack.last.to = node;
      return;
    }
    node = new Node(o.constructor.name, o);
    this.seen[node.id] = node;
    this.nodes.push(node);
    return withNode((function(_this) {
      return function(node) {
        return _this["super"](o);
      };
    })(this));
  };

  Dot.prototype.edge = function(name, callback) {
    var edge;
    edge = new Edge(name, u(this.nodeStack).last());
    this.edgeStack.push(edge);
    this.edges.push(edge);
    callback();
    return this.edgeStack.pop();
  };

  Dot.prototype.withNode = function(node, callback) {
    var edge;
    if (edge = u(this.edgeStack).last()) {
      edge.to = node;
    }
    this.nodeStack.push(node);
    callback();
    return this.nodeStack.pop();
  };

  Dot.prototype.quote = function(string) {
    return string.toString().replace(/\"/g, "\"");
  };

  Dot.prototype.toDot = function() {
    return "digraph \"ARel\" {\nnode [width=0.375,height=0.25,shape=record];\n" + (u(this.nodes).map((function(_this) {
      return function(node) {
        var label;
        label = "<f0>" + node.name;
        u(node.fields).each(function(field, i) {
          return label.push("|<f" + (i + 1) + ">" + (_this.quote(field)));
        });
        return node.id + " [label=\"" + label + "\"];";
      };
    })(this))).join("\n") + "\n" + u(this.edges).map((function(edge) {
      return edge.from.id + " -> " + edge.to.id + " [label=\"" + edge.name + "\"];";
    }).join("\n") + "\n}");
  };

  return Dot;

})(Visitor);

exports = module.exports = Dot;
