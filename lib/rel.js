// Generated by CoffeeScript 1.10.0
var CaseBuilder, InsertManager, Nodes, Range, Rel, SelectManager, Table, UpdateManager, exports,
  slice = [].slice;

Nodes = require('./nodes/nodes');

Range = require('./range');

Table = require('./table');

SelectManager = require('./select-manager');

InsertManager = require('./select-manager');

UpdateManager = require('./select-manager');

CaseBuilder = require('./nodes/case-builder');

Rel = {
  VERSION: '0.0.1',
  sql: function(rawSql) {
    return new Nodes.SqlLiteral(rawSql);
  },
  star: function() {
    return this.sql('*');
  },
  range: function(start, finish) {
    return new Range(start, finish);
  },
  func: function(name) {
    return (function(_this) {
      return function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return new Nodes.FunctionNode(args, _this.sql(name));
      };
    })(this);
  },
  lit: function(value) {
    return new Nodes.ConstLit(value);
  },
  Nodes: Nodes,
  Table: Table,
  table: function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Table, args, function(){});
  },
  select: function() {
    return new SelectManager();
  },
  insert: function() {
    return new InsertManager();
  },
  update: function() {
    return new UpdateManager();
  },
  "case": function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(CaseBuilder, args, function(){});
  }
};

exports = module.exports = Rel;
