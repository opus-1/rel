// Generated by CoffeeScript 1.10.0
var And, As, Assignment, Attribute, Avg, Between, Bin, Binary, ConstLit, DoesNotMatch, Equality, Except, Exists, FullOuterJoin, FunctionNode, GreaterThan, GreaterThanOrEqual, Group, Grouping, Having, ILike, In, InnerJoin, InsertStatement, Intersect, IsNull, Join, LeftOuterJoin, LessThan, LessThanOrEqual, Like, Limit, Lock, Matches, Max, Min, Nodes, Not, NotEqual, NotIn, NotNull, Offset, On, Or, Ordering, RightOuterJoin, SelectCore, SelectStatement, SqlLiteral, StringJoin, Sum, TableAlias, TableStar, Top, Unary, Union, UnionAll, UnqualifiedName, Values, With, WithRecursive, exports,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Binary = require('./binary');

SelectStatement = require('./select-statement');

SqlLiteral = require('./sql-literal');

SelectCore = require('./select-core');

Unary = require('./unary');

TableAlias = require('./table-alias');

And = require('./and');

FunctionNode = require('./function-node');

Attribute = require('../attribute');

InsertStatement = require('./insert-statement');

ConstLit = require('./const-lit');

Nodes = {
  SelectStatement: SelectStatement,
  InsertStatement: InsertStatement,
  SqlLiteral: SqlLiteral,
  SelectCore: SelectCore,
  Binary: Binary,
  TableAlias: TableAlias,
  And: And,
  ConstLit: ConstLit,
  Join: Join = (function(superClass) {
    extend(Join, superClass);

    function Join() {
      return Join.__super__.constructor.apply(this, arguments);
    }

    return Join;

  })(Binary),
  InnerJoin: InnerJoin = (function(superClass) {
    extend(InnerJoin, superClass);

    function InnerJoin() {
      return InnerJoin.__super__.constructor.apply(this, arguments);
    }

    return InnerJoin;

  })(Join),
  LeftOuterJoin: LeftOuterJoin = (function(superClass) {
    extend(LeftOuterJoin, superClass);

    function LeftOuterJoin() {
      return LeftOuterJoin.__super__.constructor.apply(this, arguments);
    }

    return LeftOuterJoin;

  })(Join),
  RightOuterJoin: RightOuterJoin = (function(superClass) {
    extend(RightOuterJoin, superClass);

    function RightOuterJoin() {
      return RightOuterJoin.__super__.constructor.apply(this, arguments);
    }

    return RightOuterJoin;

  })(Join),
  FullOuterJoin: FullOuterJoin = (function(superClass) {
    extend(FullOuterJoin, superClass);

    function FullOuterJoin() {
      return FullOuterJoin.__super__.constructor.apply(this, arguments);
    }

    return FullOuterJoin;

  })(Join),
  StringJoin: StringJoin = (function(superClass) {
    extend(StringJoin, superClass);

    function StringJoin(left, right) {
      if (right == null) {
        right = null;
      }
      StringJoin.__super__.constructor.call(this, left, right);
    }

    return StringJoin;

  })(Join),
  TableAlias: TableAlias = (function(superClass) {
    extend(TableAlias, superClass);

    function TableAlias(left1, right1) {
      this.left = left1;
      this.right = right1;
      TableAlias.__super__.constructor.call(this, this.left, this.right);
      this.name = this.right;
      this.relation = this.left;
      this.tableAlias = this.name;
      this.tableName = this.relation.name;
    }

    TableAlias.prototype.column = function(name) {
      return new Attribute(this, name);
    };

    return TableAlias;

  })(Binary),
  FunctionNode: FunctionNode,
  Sum: Sum = (function(superClass) {
    extend(Sum, superClass);

    function Sum() {
      return Sum.__super__.constructor.apply(this, arguments);
    }

    return Sum;

  })(FunctionNode),
  Exists: Exists = (function(superClass) {
    extend(Exists, superClass);

    function Exists() {
      return Exists.__super__.constructor.apply(this, arguments);
    }

    return Exists;

  })(FunctionNode),
  Max: Max = (function(superClass) {
    extend(Max, superClass);

    function Max() {
      return Max.__super__.constructor.apply(this, arguments);
    }

    return Max;

  })(FunctionNode),
  Min: Min = (function(superClass) {
    extend(Min, superClass);

    function Min() {
      return Min.__super__.constructor.apply(this, arguments);
    }

    return Min;

  })(FunctionNode),
  Avg: Avg = (function(superClass) {
    extend(Avg, superClass);

    function Avg() {
      return Avg.__super__.constructor.apply(this, arguments);
    }

    return Avg;

  })(FunctionNode),
  As: As = (function(superClass) {
    extend(As, superClass);

    function As() {
      return As.__super__.constructor.apply(this, arguments);
    }

    return As;

  })(Binary),
  Assignment: Assignment = (function(superClass) {
    extend(Assignment, superClass);

    function Assignment() {
      return Assignment.__super__.constructor.apply(this, arguments);
    }

    return Assignment;

  })(Binary),
  Between: Between = (function(superClass) {
    extend(Between, superClass);

    function Between() {
      return Between.__super__.constructor.apply(this, arguments);
    }

    return Between;

  })(Binary),
  DoesNotMatch: DoesNotMatch = (function(superClass) {
    extend(DoesNotMatch, superClass);

    function DoesNotMatch() {
      return DoesNotMatch.__super__.constructor.apply(this, arguments);
    }

    return DoesNotMatch;

  })(Binary),
  GreaterThan: GreaterThan = (function(superClass) {
    extend(GreaterThan, superClass);

    function GreaterThan() {
      return GreaterThan.__super__.constructor.apply(this, arguments);
    }

    return GreaterThan;

  })(Binary),
  GreaterThanOrEqual: GreaterThanOrEqual = (function(superClass) {
    extend(GreaterThanOrEqual, superClass);

    function GreaterThanOrEqual() {
      return GreaterThanOrEqual.__super__.constructor.apply(this, arguments);
    }

    return GreaterThanOrEqual;

  })(Binary),
  Join: Join = (function(superClass) {
    extend(Join, superClass);

    function Join() {
      return Join.__super__.constructor.apply(this, arguments);
    }

    return Join;

  })(Binary),
  Like: Like = (function(superClass) {
    extend(Like, superClass);

    function Like() {
      return Like.__super__.constructor.apply(this, arguments);
    }

    return Like;

  })(Binary),
  ILike: ILike = (function(superClass) {
    extend(ILike, superClass);

    function ILike() {
      return ILike.__super__.constructor.apply(this, arguments);
    }

    return ILike;

  })(Binary),
  LessThan: LessThan = (function(superClass) {
    extend(LessThan, superClass);

    function LessThan() {
      return LessThan.__super__.constructor.apply(this, arguments);
    }

    return LessThan;

  })(Binary),
  LessThanOrEqual: LessThanOrEqual = (function(superClass) {
    extend(LessThanOrEqual, superClass);

    function LessThanOrEqual() {
      return LessThanOrEqual.__super__.constructor.apply(this, arguments);
    }

    return LessThanOrEqual;

  })(Binary),
  Matches: Matches = (function(superClass) {
    extend(Matches, superClass);

    function Matches() {
      return Matches.__super__.constructor.apply(this, arguments);
    }

    return Matches;

  })(Binary),
  NotEqual: NotEqual = (function(superClass) {
    extend(NotEqual, superClass);

    function NotEqual() {
      return NotEqual.__super__.constructor.apply(this, arguments);
    }

    return NotEqual;

  })(Binary),
  NotIn: NotIn = (function(superClass) {
    extend(NotIn, superClass);

    function NotIn() {
      return NotIn.__super__.constructor.apply(this, arguments);
    }

    return NotIn;

  })(Binary),
  Or: Or = (function(superClass) {
    extend(Or, superClass);

    function Or() {
      return Or.__super__.constructor.apply(this, arguments);
    }

    return Or;

  })(Binary),
  Union: Union = (function(superClass) {
    extend(Union, superClass);

    function Union() {
      return Union.__super__.constructor.apply(this, arguments);
    }

    return Union;

  })(Binary),
  UnionAll: UnionAll = (function(superClass) {
    extend(UnionAll, superClass);

    function UnionAll() {
      return UnionAll.__super__.constructor.apply(this, arguments);
    }

    return UnionAll;

  })(Binary),
  Intersect: Intersect = (function(superClass) {
    extend(Intersect, superClass);

    function Intersect() {
      return Intersect.__super__.constructor.apply(this, arguments);
    }

    return Intersect;

  })(Binary),
  Except: Except = (function(superClass) {
    extend(Except, superClass);

    function Except() {
      return Except.__super__.constructor.apply(this, arguments);
    }

    return Except;

  })(Binary),
  Ordering: Ordering = (function(superClass) {
    extend(Ordering, superClass);

    function Ordering() {
      return Ordering.__super__.constructor.apply(this, arguments);
    }

    return Ordering;

  })(Binary),
  IsNull: IsNull = (function(superClass) {
    extend(IsNull, superClass);

    function IsNull() {
      return IsNull.__super__.constructor.apply(this, arguments);
    }

    return IsNull;

  })(Unary),
  NotNull: NotNull = (function(superClass) {
    extend(NotNull, superClass);

    function NotNull() {
      return NotNull.__super__.constructor.apply(this, arguments);
    }

    return NotNull;

  })(Unary),
  Bin: Bin = (function(superClass) {
    extend(Bin, superClass);

    function Bin() {
      return Bin.__super__.constructor.apply(this, arguments);
    }

    return Bin;

  })(Unary),
  Group: Group = (function(superClass) {
    extend(Group, superClass);

    function Group() {
      return Group.__super__.constructor.apply(this, arguments);
    }

    return Group;

  })(Unary),
  Grouping: Grouping = (function(superClass) {
    extend(Grouping, superClass);

    function Grouping() {
      return Grouping.__super__.constructor.apply(this, arguments);
    }

    return Grouping;

  })(Unary),
  Having: Having = (function(superClass) {
    extend(Having, superClass);

    function Having() {
      return Having.__super__.constructor.apply(this, arguments);
    }

    return Having;

  })(Unary),
  Limit: Limit = (function(superClass) {
    extend(Limit, superClass);

    function Limit() {
      return Limit.__super__.constructor.apply(this, arguments);
    }

    return Limit;

  })(Unary),
  Not: Not = (function(superClass) {
    extend(Not, superClass);

    function Not() {
      return Not.__super__.constructor.apply(this, arguments);
    }

    return Not;

  })(Unary),
  Offset: Offset = (function(superClass) {
    extend(Offset, superClass);

    function Offset() {
      return Offset.__super__.constructor.apply(this, arguments);
    }

    return Offset;

  })(Unary),
  On: On = (function(superClass) {
    extend(On, superClass);

    function On() {
      return On.__super__.constructor.apply(this, arguments);
    }

    return On;

  })(Unary),
  Top: Top = (function(superClass) {
    extend(Top, superClass);

    function Top() {
      return Top.__super__.constructor.apply(this, arguments);
    }

    return Top;

  })(Unary),
  Lock: Lock = (function(superClass) {
    extend(Lock, superClass);

    function Lock() {
      return Lock.__super__.constructor.apply(this, arguments);
    }

    return Lock;

  })(Unary),
  Equality: Equality = (function(superClass) {
    extend(Equality, superClass);

    function Equality(left1, right1) {
      this.left = left1;
      this.right = right1;
      Equality.__super__.constructor.call(this, this.left, this.right);
      this.operator = '==';
      this.operand1 = this.left;
      this.operand2 = this.right;
    }

    return Equality;

  })(Binary),
  In: In = (function(superClass) {
    extend(In, superClass);

    function In() {
      return In.__super__.constructor.apply(this, arguments);
    }

    return In;

  })(Equality),
  With: With = (function(superClass) {
    extend(With, superClass);

    function With(expr) {
      this.expr = expr;
      this.children = this.expr;
    }

    return With;

  })(Unary),
  WithRecursive: WithRecursive = (function(superClass) {
    extend(WithRecursive, superClass);

    function WithRecursive() {
      return WithRecursive.__super__.constructor.apply(this, arguments);
    }

    return WithRecursive;

  })(With),
  TableStar: TableStar = (function(superClass) {
    extend(TableStar, superClass);

    function TableStar() {
      return TableStar.__super__.constructor.apply(this, arguments);
    }

    return TableStar;

  })(Unary),
  Values: Values = (function(superClass) {
    extend(Values, superClass);

    function Values(exprs, columns) {
      if (columns == null) {
        columns = [];
      }
      Values.__super__.constructor.call(this, exprs, columns);
    }

    Values.prototype.expressions = function(e) {
      if (e == null) {
        e = null;
      }
      if (e != null) {
        return this.left = e;
      } else {
        return this.left;
      }
    };

    Values.prototype.columns = function(c) {
      if (c == null) {
        c = null;
      }
      if (c != null) {
        return this.right = c;
      } else {
        return this.right;
      }
    };

    return Values;

  })(Binary),
  UnqualifiedName: UnqualifiedName = (function(superClass) {
    extend(UnqualifiedName, superClass);

    function UnqualifiedName() {
      return UnqualifiedName.__super__.constructor.apply(this, arguments);
    }

    UnqualifiedName.prototype.attribute = function(attr) {
      if (attr != null) {
        return this.expr = attr;
      } else {
        return this.expr;
      }
    };

    UnqualifiedName.prototype.relation = function() {
      return this.expr.relation;
    };

    UnqualifiedName.prototype.column = function() {
      return this.expr.column;
    };

    UnqualifiedName.prototype.name = function() {
      return this.expr;
    };

    return UnqualifiedName;

  })(Unary)
};

exports = module.exports = Nodes;
